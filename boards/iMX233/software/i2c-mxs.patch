*** i2c-mxs.c.orig	2012-07-17 11:45:08.721901673 +0300
--- i2c-mxs.c	2012-07-17 11:20:05.185235569 +0300
***************
*** 67,72 ****
--- 67,162 ----
  #define HW_I2C_QUEUECTRL_CLR	HW_I2C_VERSION
  #endif
  
+ static int __mxs_reset_block(void __iomem *hwreg, int just_enable)
+ {
+ 	u32 c;
+ 	int timeout;
+ 
+ 	/* the process of software reset of IP block is done
+ 	   in several steps:
+ 
+ 	   - clear SFTRST and wait for block is enabled;
+ 	   - clear clock gating (CLKGATE bit);
+ 	   - set the SFTRST again and wait for block is in reset;
+ 	   - clear SFTRST and wait for reset completion.
+ 	 */
+ 	c = __raw_readl(hwreg);
+ 	c &= ~(1 << 31);	/* clear SFTRST */
+ 	__raw_writel(c, hwreg);
+ 	for (timeout = 1000000; timeout > 0; timeout--)
+ 		/* still in SFTRST state ? */
+ 		if ((__raw_readl(hwreg) & (1 << 31)) == 0)
+ 			break;
+ 	if (timeout <= 0) {
+ 		printk(KERN_ERR "%s(%p): timeout when enabling\n",
+ 		       __func__, hwreg);
+ 		return -ETIME;
+ 	}
+ 
+ 	c = __raw_readl(hwreg);
+ 	c &= ~(1 << 30);	/* clear CLKGATE */
+ 	__raw_writel(c, hwreg);
+ 
+ 	if (!just_enable) {
+ 		c = __raw_readl(hwreg);
+ 		c |= (1 << 31);	/* now again set SFTRST */
+ 		__raw_writel(c, hwreg);
+ 		for (timeout = 1000000; timeout > 0; timeout--)
+ 			/* poll until CLKGATE set */
+ 			if (__raw_readl(hwreg) & (1 << 30))
+ 				break;
+ 		if (timeout <= 0) {
+ 			printk(KERN_ERR "%s(%p): timeout when resetting\n",
+ 			       __func__, hwreg);
+ 			return -ETIME;
+ 		}
+ 
+ 		c = __raw_readl(hwreg);
+ 		c &= ~(1 << 31);	/* clear SFTRST */
+ 		__raw_writel(c, hwreg);
+ 		for (timeout = 1000000; timeout > 0; timeout--)
+ 			/* still in SFTRST state ? */
+ 			if ((__raw_readl(hwreg) & (1 << 31)) == 0)
+ 				break;
+ 		if (timeout <= 0) {
+ 			printk(KERN_ERR "%s(%p): timeout when enabling "
+ 			       "after reset\n", __func__, hwreg);
+ 			return -ETIME;
+ 		}
+ 
+ 		c = __raw_readl(hwreg);
+ 		c &= ~(1 << 30);	/* clear CLKGATE */
+ 		__raw_writel(c, hwreg);
+ 	}
+ 	for (timeout = 1000000; timeout > 0; timeout--)
+ 		/* still in SFTRST state ? */
+ 		if ((__raw_readl(hwreg) & (1 << 30)) == 0)
+ 			break;
+ 
+ 	if (timeout <= 0) {
+ 		printk(KERN_ERR "%s(%p): timeout when unclockgating\n",
+ 		       __func__, hwreg);
+ 		return -ETIME;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int mxs_reset_block(void __iomem *hwreg, int just_enable)
+ {
+ 	int try = 10;
+ 	int r;
+ 
+ 	while (try--) {
+ 		r = __mxs_reset_block(hwreg, just_enable);
+ 		if (!r)
+ 			break;
+ 		pr_debug("%s: try %d failed\n", __func__, 10 - try);
+ 	}
+ 	return r;
+ }
+ 
+ 
  static void hw_i2c_dmachan_reset(struct mxs_i2c_dev *dev)
  {
  	mxs_dma_disable(dev->dma_chan);
